{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { drawBackground, drawOrb, drawHeroText } from '../utils/drawing';\nimport { SPLIT_SPEED, OPACITY_CHANGE_SPEED } from '../constants';\nexport const useAnimationLoop = (canvasRef, width, height, state, setState, {\n  particles,\n  updateParticles,\n  drawParticles,\n  whispers,\n  updateWhispers,\n  drawWhispers\n}) => {\n  _s();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    function animate(time) {\n      ctx.clearRect(0, 0, width, height);\n      drawBackground(ctx, width, height);\n      drawOrb(ctx, width, height, time / 1000, state.splitProgress, state.leftChatMessage, state.userMessage);\n      drawHeroText(ctx, width, height, state.heroTextOpacity);\n      updateParticles();\n      drawParticles(ctx);\n      updateWhispers();\n      drawWhispers(ctx, width, height);\n      if (state.isSplit && state.splitProgress < 1) {\n        setState(prev => ({\n          ...prev,\n          splitProgress: Math.min(prev.splitProgress + SPLIT_SPEED, 1),\n          heroTextOpacity: Math.max(prev.heroTextOpacity - OPACITY_CHANGE_SPEED, 0)\n        }));\n      } else if (!state.isSplit && state.splitProgress > 0) {\n        setState(prev => ({\n          ...prev,\n          splitProgress: Math.max(prev.splitProgress - SPLIT_SPEED, 0)\n        }));\n      }\n      requestAnimationFrame(animate);\n    }\n    requestAnimationFrame(animate);\n  }, [width, height, state, setState, particles, updateParticles, drawParticles, whispers, updateWhispers, drawWhispers]);\n};\n_s(useAnimationLoop, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","drawBackground","drawOrb","drawHeroText","SPLIT_SPEED","OPACITY_CHANGE_SPEED","useAnimationLoop","canvasRef","width","height","state","setState","particles","updateParticles","drawParticles","whispers","updateWhispers","drawWhispers","_s","canvas","current","ctx","getContext","animate","time","clearRect","splitProgress","leftChatMessage","userMessage","heroTextOpacity","isSplit","prev","Math","min","max","requestAnimationFrame"],"sources":["C:/Users/vtrav/Desktop/ethereal-violet-orb/src/components/EtherealOrb/hooks/useAnimationLoop.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { drawBackground, drawOrb, drawHeroText } from '../utils/drawing';\r\nimport { SPLIT_SPEED, OPACITY_CHANGE_SPEED } from '../constants';\r\n\r\nexport const useAnimationLoop = (canvasRef, width, height, state, setState, {\r\n  particles,\r\n  updateParticles,\r\n  drawParticles,\r\n  whispers,\r\n  updateWhispers,\r\n  drawWhispers\r\n}) => {\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    function animate(time) {\r\n      ctx.clearRect(0, 0, width, height);\r\n      drawBackground(ctx, width, height);\r\n      drawOrb(ctx, width, height, time / 1000, state.splitProgress, state.leftChatMessage, state.userMessage);\r\n      drawHeroText(ctx, width, height, state.heroTextOpacity);\r\n      updateParticles();\r\n      drawParticles(ctx);\r\n      updateWhispers();\r\n      drawWhispers(ctx, width, height);\r\n\r\n      if (state.isSplit && state.splitProgress < 1) {\r\n        setState(prev => ({\r\n          ...prev,\r\n          splitProgress: Math.min(prev.splitProgress + SPLIT_SPEED, 1),\r\n          heroTextOpacity: Math.max(prev.heroTextOpacity - OPACITY_CHANGE_SPEED, 0)\r\n        }));\r\n      } else if (!state.isSplit && state.splitProgress > 0) {\r\n        setState(prev => ({\r\n          ...prev,\r\n          splitProgress: Math.max(prev.splitProgress - SPLIT_SPEED, 0)\r\n        }));\r\n      }\r\n\r\n      requestAnimationFrame(animate);\r\n    }\r\n\r\n    requestAnimationFrame(animate);\r\n  }, [width, height, state, setState, particles, updateParticles, drawParticles, whispers, updateWhispers, drawWhispers]);\r\n};"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,EAAEC,OAAO,EAAEC,YAAY,QAAQ,kBAAkB;AACxE,SAASC,WAAW,EAAEC,oBAAoB,QAAQ,cAAc;AAEhE,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC1EC,SAAS;EACTC,eAAe;EACfC,aAAa;EACbC,QAAQ;EACRC,cAAc;EACdC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJlB,SAAS,CAAC,MAAM;IACd,MAAMmB,MAAM,GAAGZ,SAAS,CAACa,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEnC,SAASC,OAAOA,CAACC,IAAI,EAAE;MACrBH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEjB,KAAK,EAAEC,MAAM,CAAC;MAClCR,cAAc,CAACoB,GAAG,EAAEb,KAAK,EAAEC,MAAM,CAAC;MAClCP,OAAO,CAACmB,GAAG,EAAEb,KAAK,EAAEC,MAAM,EAAEe,IAAI,GAAG,IAAI,EAAEd,KAAK,CAACgB,aAAa,EAAEhB,KAAK,CAACiB,eAAe,EAAEjB,KAAK,CAACkB,WAAW,CAAC;MACvGzB,YAAY,CAACkB,GAAG,EAAEb,KAAK,EAAEC,MAAM,EAAEC,KAAK,CAACmB,eAAe,CAAC;MACvDhB,eAAe,CAAC,CAAC;MACjBC,aAAa,CAACO,GAAG,CAAC;MAClBL,cAAc,CAAC,CAAC;MAChBC,YAAY,CAACI,GAAG,EAAEb,KAAK,EAAEC,MAAM,CAAC;MAEhC,IAAIC,KAAK,CAACoB,OAAO,IAAIpB,KAAK,CAACgB,aAAa,GAAG,CAAC,EAAE;QAC5Cf,QAAQ,CAACoB,IAAI,KAAK;UAChB,GAAGA,IAAI;UACPL,aAAa,EAAEM,IAAI,CAACC,GAAG,CAACF,IAAI,CAACL,aAAa,GAAGtB,WAAW,EAAE,CAAC,CAAC;UAC5DyB,eAAe,EAAEG,IAAI,CAACE,GAAG,CAACH,IAAI,CAACF,eAAe,GAAGxB,oBAAoB,EAAE,CAAC;QAC1E,CAAC,CAAC,CAAC;MACL,CAAC,MAAM,IAAI,CAACK,KAAK,CAACoB,OAAO,IAAIpB,KAAK,CAACgB,aAAa,GAAG,CAAC,EAAE;QACpDf,QAAQ,CAACoB,IAAI,KAAK;UAChB,GAAGA,IAAI;UACPL,aAAa,EAAEM,IAAI,CAACE,GAAG,CAACH,IAAI,CAACL,aAAa,GAAGtB,WAAW,EAAE,CAAC;QAC7D,CAAC,CAAC,CAAC;MACL;MAEA+B,qBAAqB,CAACZ,OAAO,CAAC;IAChC;IAEAY,qBAAqB,CAACZ,OAAO,CAAC;EAChC,CAAC,EAAE,CAACf,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,YAAY,CAAC,CAAC;AACzH,CAAC;AAACC,EAAA,CAxCWZ,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}