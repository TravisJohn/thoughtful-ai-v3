{"ast":null,"code":"// File: src/components/EtherealOrb/utils/drawing.js\nconst orbRadius = 100;\nexport function drawBackground(ctx, width, height) {\n  const gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, Math.max(width, height) / 2);\n  gradient.addColorStop(0, '#ffffff');\n  gradient.addColorStop(0.7, '#f0f0f0');\n  gradient.addColorStop(1, '#e0e0e0');\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, width, height);\n}\nexport function drawHeroText(ctx, width, height, opacity) {\n  ctx.save();\n  ctx.font = '48px Orbitron, sans-serif';\n  ctx.fillStyle = `rgba(128, 128, 128, ${opacity})`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('thoughtful.AI', width / 2, height / 2);\n  ctx.restore();\n}\nexport function drawOrb(ctx, width, height, time, splitProgress, leftChatMessage, userMessage) {\n  if (splitProgress < 0.5) {\n    drawFadingOrb(ctx, width, height, time, splitProgress);\n  } else {\n    drawSplitOrbs(ctx, width, height, time, splitProgress, leftChatMessage, userMessage);\n  }\n}\nfunction drawFadingOrb(ctx, width, height, t, splitProgress) {\n  ctx.save();\n  ctx.translate(width / 2, height / 2);\n  const gradient = createOrbGradient(ctx, orbRadius);\n  ctx.beginPath();\n  for (let i = 0; i < 360; i += 5) {\n    const angle = i * Math.PI / 180;\n    const noise = Math.sin(i * 0.05 + t) * 4;\n    const r = orbRadius + noise;\n    const x = Math.cos(angle) * r;\n    const y = Math.sin(angle) * r;\n    if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n  }\n  ctx.closePath();\n  ctx.fillStyle = gradient;\n  ctx.globalAlpha = 0.6 * (1 - splitProgress * 2);\n  ctx.fill();\n  ctx.restore();\n}\nfunction drawSplitOrbs(ctx, width, height, t, splitProgress, leftChatMessage, userMessage) {\n  const normalizedProgress = (splitProgress - 0.5) * 2; // 0 to 1\n\n  // Calculate base positions\n  const leftX = lerp(width / 2, width * 0.25, normalizedProgress);\n  const rightX = lerp(width / 2, width * 0.75, normalizedProgress);\n  const y = lerp(height / 2, height * 0.3, normalizedProgress);\n  const baseRadius = lerp(0, orbRadius * 0.6, normalizedProgress);\n\n  // Draw orbs with adaptive sizes\n  drawSmallOrb(ctx, leftX, y, baseRadius, t, normalizedProgress, leftChatMessage, 0.6);\n  drawSmallOrb(ctx, rightX, y, baseRadius, t, normalizedProgress, userMessage, 0.3);\n}\nfunction drawSmallOrb(ctx, x, y, baseRadius, t, progress, message, maxAlpha) {\n  ctx.save();\n  ctx.translate(x, y);\n\n  // Calculate text width\n  ctx.font = '12px Arial';\n  const textWidth = ctx.measureText(message || '').width;\n  const textPadding = 20; // Extra space around the text\n\n  // Adjust radius based on text width, but keep a minimum size\n  const radius = Math.max(baseRadius, (textWidth + textPadding) / 2);\n  const gradient = createOrbGradient(ctx, radius);\n  ctx.beginPath();\n  for (let i = 0; i < 360; i += 5) {\n    const angle = i * Math.PI / 180;\n    const noise = Math.sin(i * 0.05 + t) * 2;\n    const r = radius + noise;\n    const xPos = Math.cos(angle) * r;\n    const yPos = Math.sin(angle) * r;\n    if (i === 0) ctx.moveTo(xPos, yPos);else ctx.lineTo(xPos, yPos);\n  }\n  ctx.closePath();\n  ctx.fillStyle = gradient;\n  ctx.globalAlpha = maxAlpha * progress;\n  ctx.fill();\n  if (message) {\n    ctx.fillStyle = `rgba(0, 0, 0, ${progress})`;\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(message, 0, 0);\n  }\n  ctx.restore();\n}\nfunction createOrbGradient(ctx, radius) {\n  const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, radius);\n  gradient.addColorStop(0, 'rgba(147, 51, 234, 0.4)');\n  gradient.addColorStop(0.4, 'rgba(126, 34, 206, 0.3)');\n  gradient.addColorStop(0.8, 'rgba(107, 33, 168, 0.2)');\n  gradient.addColorStop(1, 'rgba(88, 28, 135, 0.1)');\n  return gradient;\n}\nfunction lerp(start, end, t) {\n  return start * (1 - t) + end * t;\n}","map":{"version":3,"names":["orbRadius","drawBackground","ctx","width","height","gradient","createRadialGradient","Math","max","addColorStop","fillStyle","fillRect","drawHeroText","opacity","save","font","textAlign","textBaseline","fillText","restore","drawOrb","time","splitProgress","leftChatMessage","userMessage","drawFadingOrb","drawSplitOrbs","t","translate","createOrbGradient","beginPath","i","angle","PI","noise","sin","r","x","cos","y","moveTo","lineTo","closePath","globalAlpha","fill","normalizedProgress","leftX","lerp","rightX","baseRadius","drawSmallOrb","progress","message","maxAlpha","textWidth","measureText","textPadding","radius","xPos","yPos","start","end"],"sources":["C:/Users/vtrav/Desktop/my-new-app/ethereal-violet-orb/src/components/EtherealOrb/utils/drawing.js"],"sourcesContent":["// File: src/components/EtherealOrb/utils/drawing.js\r\nconst orbRadius = 100;\r\n\r\nexport function drawBackground(ctx, width, height) {\r\n  const gradient = ctx.createRadialGradient(\r\n    width / 2,\r\n    height / 2,\r\n    0,\r\n    width / 2,\r\n    height / 2,\r\n    Math.max(width, height) / 2\r\n  );\r\n  gradient.addColorStop(0, '#ffffff');\r\n  gradient.addColorStop(0.7, '#f0f0f0');\r\n  gradient.addColorStop(1, '#e0e0e0');\r\n  ctx.fillStyle = gradient;\r\n  ctx.fillRect(0, 0, width, height);\r\n}\r\n\r\nexport function drawHeroText(ctx, width, height, opacity) {\r\n  ctx.save();\r\n  ctx.font = '48px Orbitron, sans-serif';\r\n  ctx.fillStyle = `rgba(128, 128, 128, ${opacity})`;\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText('thoughtful.AI', width / 2, height / 2);\r\n  ctx.restore();\r\n}\r\n\r\nexport function drawOrb(ctx, width, height, time, splitProgress, leftChatMessage, userMessage) {\r\n  if (splitProgress < 0.5) {\r\n    drawFadingOrb(ctx, width, height, time, splitProgress);\r\n  } else {\r\n    drawSplitOrbs(ctx, width, height, time, splitProgress, leftChatMessage, userMessage);\r\n  }\r\n}\r\n\r\nfunction drawFadingOrb(ctx, width, height, t, splitProgress) {\r\n  ctx.save();\r\n  ctx.translate(width / 2, height / 2);\r\n\r\n  const gradient = createOrbGradient(ctx, orbRadius);\r\n\r\n  ctx.beginPath();\r\n  for (let i = 0; i < 360; i += 5) {\r\n    const angle = (i * Math.PI) / 180;\r\n    const noise = Math.sin(i * 0.05 + t) * 4;\r\n    const r = orbRadius + noise;\r\n    const x = Math.cos(angle) * r;\r\n    const y = Math.sin(angle) * r;\r\n    if (i === 0) ctx.moveTo(x, y);\r\n    else ctx.lineTo(x, y);\r\n  }\r\n  ctx.closePath();\r\n\r\n  ctx.fillStyle = gradient;\r\n  ctx.globalAlpha = 0.6 * (1 - splitProgress * 2);\r\n  ctx.fill();\r\n  ctx.restore();\r\n}\r\n\r\nfunction drawSplitOrbs(ctx, width, height, t, splitProgress, leftChatMessage, userMessage) {\r\n  const normalizedProgress = (splitProgress - 0.5) * 2; // 0 to 1\r\n\r\n  // Calculate base positions\r\n  const leftX = lerp(width / 2, width * 0.25, normalizedProgress);\r\n  const rightX = lerp(width / 2, width * 0.75, normalizedProgress);\r\n  const y = lerp(height / 2, height * 0.3, normalizedProgress);\r\n  const baseRadius = lerp(0, orbRadius * 0.6, normalizedProgress);\r\n\r\n  // Draw orbs with adaptive sizes\r\n  drawSmallOrb(ctx, leftX, y, baseRadius, t, normalizedProgress, leftChatMessage, 0.6);\r\n  drawSmallOrb(ctx, rightX, y, baseRadius, t, normalizedProgress, userMessage, 0.3);\r\n}\r\n\r\nfunction drawSmallOrb(ctx, x, y, baseRadius, t, progress, message, maxAlpha) {\r\n  ctx.save();\r\n  ctx.translate(x, y);\r\n\r\n  // Calculate text width\r\n  ctx.font = '12px Arial';\r\n  const textWidth = ctx.measureText(message || '').width;\r\n  const textPadding = 20; // Extra space around the text\r\n\r\n  // Adjust radius based on text width, but keep a minimum size\r\n  const radius = Math.max(baseRadius, (textWidth + textPadding) / 2);\r\n\r\n  const gradient = createOrbGradient(ctx, radius);\r\n\r\n  ctx.beginPath();\r\n  for (let i = 0; i < 360; i += 5) {\r\n    const angle = (i * Math.PI) / 180;\r\n    const noise = Math.sin(i * 0.05 + t) * 2;\r\n    const r = radius + noise;\r\n    const xPos = Math.cos(angle) * r;\r\n    const yPos = Math.sin(angle) * r;\r\n    if (i === 0) ctx.moveTo(xPos, yPos);\r\n    else ctx.lineTo(xPos, yPos);\r\n  }\r\n  ctx.closePath();\r\n\r\n  ctx.fillStyle = gradient;\r\n  ctx.globalAlpha = maxAlpha * progress;\r\n  ctx.fill();\r\n\r\n  if (message) {\r\n    ctx.fillStyle = `rgba(0, 0, 0, ${progress})`;\r\n    ctx.font = '12px Arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText(message, 0, 0);\r\n  }\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction createOrbGradient(ctx, radius) {\r\n  const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, radius);\r\n  gradient.addColorStop(0, 'rgba(147, 51, 234, 0.4)');\r\n  gradient.addColorStop(0.4, 'rgba(126, 34, 206, 0.3)');\r\n  gradient.addColorStop(0.8, 'rgba(107, 33, 168, 0.2)');\r\n  gradient.addColorStop(1, 'rgba(88, 28, 135, 0.1)');\r\n  return gradient;\r\n}\r\n\r\nfunction lerp(start, end, t) {\r\n  return start * (1 - t) + end * t;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}